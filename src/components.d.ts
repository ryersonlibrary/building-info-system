/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  MatchResults,
  RouterHistory,
} from '@stencil/router';
import {
  Color,
} from './utils/color';
import {
  ClusterData,
  SearchResultItem,
} from './interface';
import {
  Building,
  BuildingMap,
  Floor,
  FloorMap,
} from './interface.js';
import {
  Search,
} from './utils/search';

export namespace Components {
  interface RlAccordion {
    /**
    * Flag indicating if multiple `accordion-item`s can be open at once. Defaults to true.
    */
    'allowMultiple': boolean;
    /**
    * An array of content displayed by the accordion.
    */
    'items': Array<{ [key: string]: string }>;
  }
  interface RlAccordionItem {
    /**
    * Close the `accordion-item`.
    */
    'close': () => Promise<void>;
    /**
    * A delay used to fade-in this item a specific amount of time after the component is rendered.
    */
    'delay': number;
    /**
    * An index number used to reference this item in the larger list of all items in the parent accordion.
    */
    'index': number;
    /**
    * A state tracking the current open/closed state of this item.
    */
    'isOpen': boolean;
    /**
    * Open the `accordion-item`.
    */
    'open': () => Promise<void>;
  }
  interface RlAppBar {
    /**
    * Center the title within the `app-bar`.
    */
    'centerTitle': boolean;
    /**
    * Use dense bar styling (reduced height).
    */
    'dense': boolean;
    /**
    * Use one single section to hold all buttons and the title rather than three distinc sections.
    */
    'singleSection': boolean;
    /**
    * The type of this `app-bar` used to determine style and function.
    */
    'type': 'fixed' | 'prominent' | 'short' | 'shortCollapsed' | 'prominentFixed' | '';
  }
  interface RlBis {
    /**
    * Reference to the history object created by Stencil.  Used for making app navigations programmatically.
    */
    'history'?: RouterHistory;
  }
  interface RlCard {
    /**
    * The action buttons displayed at the bottom-left of the card
    */
    'buttons'?: Array<{name: string, link: string}>;
    /**
    * The color of the card.
    */
    'cardColor': Color;
    /**
    * URL of an image to display as the media.  If no media is specified a placeholder will be used.
    */
    'cardMedia': string;
    /**
    * The title of the card
    */
    'cardTitle': string;
    /**
    * Flag indicating if the entire card is a clickable element.  This does not include any buttons or icons.
    */
    'hasPrimaryAction': boolean;
    /**
    * The Stencil history object, used to programmatically navigate.
    */
    'history'?: RouterHistory;
    /**
    * The action icons displayed at the bottom-right of the card.
    */
    'icons'?: Array<{name: string, link: string}>;
    /**
    * Media sizing rule.
    */
    'mediaSize': 'contain' | 'cover';
    /**
    * Flag indicating if the card does not have any content.
    */
    'noContent': boolean;
    /**
    * Flag indicating if the card does not use media.  This means no media or media placeholder should be displayed.
    */
    'noMedia': boolean;
    /**
    * The link to use for the primary card action.
    */
    'primaryLink': string;
    /**
    * Flag indicating if the title is displayed over top of the media (with text protection for legibility), or underneath the media on its own line.
    */
    'titleInMedia': boolean;
    /**
    * Use a wide or square aspect ratio for the media.
    */
    'wideMediaAspect': boolean;
  }
  interface RlCluster {
    /**
    * The number of columns the cluster has.  This only effects lane and grid clusters.
    */
    'columns': number;
    /**
    * The array of data displayed in the cluster.
    */
    'data'?: ClusterData[];
    /**
    * A flag indicating if a 'See All' button should be displayed, taking the user to a list of all rleated items as the cluster is used to only show an abbreviated list.
    */
    'hasMore': boolean;
    /**
    * The title of the cluster.
    */
    'heading': string;
    /**
    * Flag indicating if the cluster is displayed on mobile device or not.
    */
    'isMobile': boolean;
  }
  interface RlDrawer {
    /**
    * Flag indicating if the drawer is open.
    */
    'open': boolean;
  }
  interface RlExpansionPanel {
    'close': () => Promise<void>;
    'index': number;
    'open': () => Promise<void>;
  }
  interface RlFloorplan {
    /**
    * The ID of the active (selected) element.
    */
    'activeId': string;
    'extraElementData'?: {[key: string]: { [key: string]: string }};
    /**
    * The ID of the floorplan to display.
    */
    'floorId'?: string;
    /**
    * The height for the SVG element.
    */
    'height': string;
    /**
    * Setting to use the orthographic variant of the floorplan.
    */
    'useOrtho': boolean;
    /**
    * Setting to true adds a viewbox attribute to the SVG element.
    */
    'useViewbox': boolean;
    /**
    * The width of the SVG viewbox.
    */
    'vbHeight': string;
    /**
    * The height of the SVG viewbox.
    */
    'vbWidth': string;
    /**
    * The width for the SVG element.
    */
    'width': string;
  }
  interface RlLoadProgress {}
  interface RlMapNav {
    /**
    * The `id` of the currently active building.
    */
    'activeBuilding': Building;
    /**
    * The `id` of the currently active floor.
    */
    'activeFloor': Floor;
    /**
    * An id-indexed map of the buildings.
    */
    'buildings': BuildingMap;
    /**
    * An id-indexed map of floors.
    */
    'floors': FloorMap;
  }
  interface RlSearchBox {
    /**
    * Clear the current input value.
    */
    'clearInput': () => Promise<void>;
    /**
    * The object used to perform text searches.
    */
    'docSearch': Search;
    /**
    * Reference to the Stencil history object.
    */
    'history'?: RouterHistory;
    /**
    * Placeholder text for when the input is empty.
    */
    'placeholder': string;
    /**
    * The current value of the search input.
    */
    'searchValue': string;
    /**
    * Flag indicating if the menu icon should be displayed instead of the search icon.  This is needed when the search box extends the entire app bar and there is no room for the drawer icon.
    */
    'showMenu': boolean;
  }
  interface RlSearchSuggestions {
    /**
    * The currently active/highlighted/focused search suggestion.
    */
    'activeResult'?: number;
    /**
    * Flag indicating if there are no search suggestions (even though there is a search query).
    */
    'isEmptySearch': boolean;
    /**
    * The list of search suggestions.
    */
    'suggestions': SearchResultItem[];
  }
  interface RlSideSheet {
    'open': boolean;
  }
  interface ViewBuilding {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded': boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
  }
  interface ViewEvent {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded': boolean;
    'history': RouterHistory;
  }
  interface ViewFaq {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded': boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
    /**
    * Reference to the object passed in from Stencil containing any URL path variables that were matched by the router.
    */
    'match': MatchResults;
    'setActiveFaq': (faqId: number) => Promise<void>;
  }
  interface ViewHome {
    'appLoaded': boolean;
    'clusterColumns': number;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
    'isMobile': boolean;
  }
  interface ViewMap {
    /**
    * A global flag passed in to indicate if the application has loaded as well.
    */
    'appLoaded': boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
    /**
    * The results coming from `stencil-router` that contain any URL matches.
    */
    'match': MatchResults;
  }
  interface ViewSearch {
    'appLoaded': boolean;
    'clusterColumns': number;
    'history': RouterHistory;
    'isMobile': boolean;
    'match': MatchResults;
    'searchUrl'?: string;
  }
}

declare global {


  interface HTMLRlAccordionElement extends Components.RlAccordion, HTMLStencilElement {}
  var HTMLRlAccordionElement: {
    prototype: HTMLRlAccordionElement;
    new (): HTMLRlAccordionElement;
  };

  interface HTMLRlAccordionItemElement extends Components.RlAccordionItem, HTMLStencilElement {}
  var HTMLRlAccordionItemElement: {
    prototype: HTMLRlAccordionItemElement;
    new (): HTMLRlAccordionItemElement;
  };

  interface HTMLRlAppBarElement extends Components.RlAppBar, HTMLStencilElement {}
  var HTMLRlAppBarElement: {
    prototype: HTMLRlAppBarElement;
    new (): HTMLRlAppBarElement;
  };

  interface HTMLRlBisElement extends Components.RlBis, HTMLStencilElement {}
  var HTMLRlBisElement: {
    prototype: HTMLRlBisElement;
    new (): HTMLRlBisElement;
  };

  interface HTMLRlCardElement extends Components.RlCard, HTMLStencilElement {}
  var HTMLRlCardElement: {
    prototype: HTMLRlCardElement;
    new (): HTMLRlCardElement;
  };

  interface HTMLRlClusterElement extends Components.RlCluster, HTMLStencilElement {}
  var HTMLRlClusterElement: {
    prototype: HTMLRlClusterElement;
    new (): HTMLRlClusterElement;
  };

  interface HTMLRlDrawerElement extends Components.RlDrawer, HTMLStencilElement {}
  var HTMLRlDrawerElement: {
    prototype: HTMLRlDrawerElement;
    new (): HTMLRlDrawerElement;
  };

  interface HTMLRlExpansionPanelElement extends Components.RlExpansionPanel, HTMLStencilElement {}
  var HTMLRlExpansionPanelElement: {
    prototype: HTMLRlExpansionPanelElement;
    new (): HTMLRlExpansionPanelElement;
  };

  interface HTMLRlFloorplanElement extends Components.RlFloorplan, HTMLStencilElement {}
  var HTMLRlFloorplanElement: {
    prototype: HTMLRlFloorplanElement;
    new (): HTMLRlFloorplanElement;
  };

  interface HTMLRlLoadProgressElement extends Components.RlLoadProgress, HTMLStencilElement {}
  var HTMLRlLoadProgressElement: {
    prototype: HTMLRlLoadProgressElement;
    new (): HTMLRlLoadProgressElement;
  };

  interface HTMLRlMapNavElement extends Components.RlMapNav, HTMLStencilElement {}
  var HTMLRlMapNavElement: {
    prototype: HTMLRlMapNavElement;
    new (): HTMLRlMapNavElement;
  };

  interface HTMLRlSearchBoxElement extends Components.RlSearchBox, HTMLStencilElement {}
  var HTMLRlSearchBoxElement: {
    prototype: HTMLRlSearchBoxElement;
    new (): HTMLRlSearchBoxElement;
  };

  interface HTMLRlSearchSuggestionsElement extends Components.RlSearchSuggestions, HTMLStencilElement {}
  var HTMLRlSearchSuggestionsElement: {
    prototype: HTMLRlSearchSuggestionsElement;
    new (): HTMLRlSearchSuggestionsElement;
  };

  interface HTMLRlSideSheetElement extends Components.RlSideSheet, HTMLStencilElement {}
  var HTMLRlSideSheetElement: {
    prototype: HTMLRlSideSheetElement;
    new (): HTMLRlSideSheetElement;
  };

  interface HTMLViewBuildingElement extends Components.ViewBuilding, HTMLStencilElement {}
  var HTMLViewBuildingElement: {
    prototype: HTMLViewBuildingElement;
    new (): HTMLViewBuildingElement;
  };

  interface HTMLViewEventElement extends Components.ViewEvent, HTMLStencilElement {}
  var HTMLViewEventElement: {
    prototype: HTMLViewEventElement;
    new (): HTMLViewEventElement;
  };

  interface HTMLViewFaqElement extends Components.ViewFaq, HTMLStencilElement {}
  var HTMLViewFaqElement: {
    prototype: HTMLViewFaqElement;
    new (): HTMLViewFaqElement;
  };

  interface HTMLViewHomeElement extends Components.ViewHome, HTMLStencilElement {}
  var HTMLViewHomeElement: {
    prototype: HTMLViewHomeElement;
    new (): HTMLViewHomeElement;
  };

  interface HTMLViewMapElement extends Components.ViewMap, HTMLStencilElement {}
  var HTMLViewMapElement: {
    prototype: HTMLViewMapElement;
    new (): HTMLViewMapElement;
  };

  interface HTMLViewSearchElement extends Components.ViewSearch, HTMLStencilElement {}
  var HTMLViewSearchElement: {
    prototype: HTMLViewSearchElement;
    new (): HTMLViewSearchElement;
  };
  interface HTMLElementTagNameMap {
    'rl-accordion': HTMLRlAccordionElement;
    'rl-accordion-item': HTMLRlAccordionItemElement;
    'rl-app-bar': HTMLRlAppBarElement;
    'rl-bis': HTMLRlBisElement;
    'rl-card': HTMLRlCardElement;
    'rl-cluster': HTMLRlClusterElement;
    'rl-drawer': HTMLRlDrawerElement;
    'rl-expansion-panel': HTMLRlExpansionPanelElement;
    'rl-floorplan': HTMLRlFloorplanElement;
    'rl-load-progress': HTMLRlLoadProgressElement;
    'rl-map-nav': HTMLRlMapNavElement;
    'rl-search-box': HTMLRlSearchBoxElement;
    'rl-search-suggestions': HTMLRlSearchSuggestionsElement;
    'rl-side-sheet': HTMLRlSideSheetElement;
    'view-building': HTMLViewBuildingElement;
    'view-event': HTMLViewEventElement;
    'view-faq': HTMLViewFaqElement;
    'view-home': HTMLViewHomeElement;
    'view-map': HTMLViewMapElement;
    'view-search': HTMLViewSearchElement;
  }
}

declare namespace LocalJSX {
  interface RlAccordion {
    /**
    * Flag indicating if multiple `accordion-item`s can be open at once. Defaults to true.
    */
    'allowMultiple'?: boolean;
    /**
    * An array of content displayed by the accordion.
    */
    'items'?: Array<{ [key: string]: string }>;
  }
  interface RlAccordionItem {
    /**
    * A delay used to fade-in this item a specific amount of time after the component is rendered.
    */
    'delay'?: number;
    /**
    * An index number used to reference this item in the larger list of all items in the parent accordion.
    */
    'index'?: number;
    /**
    * A state tracking the current open/closed state of this item.
    */
    'isOpen'?: boolean;
    /**
    * Event emitted after the body's collapse animation has completed.
    */
    'onAfterCollapse'?: (event: CustomEvent<any>) => void;
    /**
    * Event emitted after the body's expand animation has completed.
    */
    'onAfterExpand'?: (event: CustomEvent<any>) => void;
    /**
    * Event emitted when the item is closed.
    */
    'onClosed'?: (event: CustomEvent<any>) => void;
    /**
    * Event emitted when the item is opened.
    */
    'onOpened'?: (event: CustomEvent<any>) => void;
  }
  interface RlAppBar {
    /**
    * Center the title within the `app-bar`.
    */
    'centerTitle'?: boolean;
    /**
    * Use dense bar styling (reduced height).
    */
    'dense'?: boolean;
    /**
    * Event fired when the menu button on the app bar is clicked.
    */
    'onMenuClicked'?: (event: CustomEvent<any>) => void;
    /**
    * Use one single section to hold all buttons and the title rather than three distinc sections.
    */
    'singleSection'?: boolean;
    /**
    * The type of this `app-bar` used to determine style and function.
    */
    'type'?: 'fixed' | 'prominent' | 'short' | 'shortCollapsed' | 'prominentFixed' | '';
  }
  interface RlBis {
    /**
    * Reference to the history object created by Stencil.  Used for making app navigations programmatically.
    */
    'history'?: RouterHistory;
  }
  interface RlCard {
    /**
    * The action buttons displayed at the bottom-left of the card
    */
    'buttons'?: Array<{name: string, link: string}>;
    /**
    * The color of the card.
    */
    'cardColor'?: Color;
    /**
    * URL of an image to display as the media.  If no media is specified a placeholder will be used.
    */
    'cardMedia'?: string;
    /**
    * The title of the card
    */
    'cardTitle'?: string;
    /**
    * Flag indicating if the entire card is a clickable element.  This does not include any buttons or icons.
    */
    'hasPrimaryAction'?: boolean;
    /**
    * The Stencil history object, used to programmatically navigate.
    */
    'history'?: RouterHistory;
    /**
    * The action icons displayed at the bottom-right of the card.
    */
    'icons'?: Array<{name: string, link: string}>;
    /**
    * Media sizing rule.
    */
    'mediaSize'?: 'contain' | 'cover';
    /**
    * Flag indicating if the card does not have any content.
    */
    'noContent'?: boolean;
    /**
    * Flag indicating if the card does not use media.  This means no media or media placeholder should be displayed.
    */
    'noMedia'?: boolean;
    /**
    * The link to use for the primary card action.
    */
    'primaryLink'?: string;
    /**
    * Flag indicating if the title is displayed over top of the media (with text protection for legibility), or underneath the media on its own line.
    */
    'titleInMedia'?: boolean;
    /**
    * Use a wide or square aspect ratio for the media.
    */
    'wideMediaAspect'?: boolean;
  }
  interface RlCluster {
    /**
    * The number of columns the cluster has.  This only effects lane and grid clusters.
    */
    'columns'?: number;
    /**
    * The array of data displayed in the cluster.
    */
    'data'?: ClusterData[];
    /**
    * A flag indicating if a 'See All' button should be displayed, taking the user to a list of all rleated items as the cluster is used to only show an abbreviated list.
    */
    'hasMore'?: boolean;
    /**
    * The title of the cluster.
    */
    'heading'?: string;
    /**
    * Flag indicating if the cluster is displayed on mobile device or not.
    */
    'isMobile'?: boolean;
  }
  interface RlDrawer {
    /**
    * An event emitted when this drawer closes.
    */
    'onDrawerClose'?: (event: CustomEvent<any>) => void;
    /**
    * Flag indicating if the drawer is open.
    */
    'open': boolean;
  }
  interface RlExpansionPanel {
    'index'?: number;
    'onToggled'?: (event: CustomEvent<any>) => void;
  }
  interface RlFloorplan {
    /**
    * The ID of the active (selected) element.
    */
    'activeId'?: string;
    'extraElementData'?: {[key: string]: { [key: string]: string }};
    /**
    * The ID of the floorplan to display.
    */
    'floorId'?: string;
    /**
    * The height for the SVG element.
    */
    'height'?: string;
    /**
    * Event fired when the SVG is clicked but no specific element is targeted, that is, the active element is cleared.
    */
    'onRlElementCleared'?: (event: CustomEvent<void>) => void;
    /**
    * Event fired when an element in the SVG is clicked (if it is clickable). Details will be the `id` of the clicked element.
    */
    'onRlElementClicked'?: (event: CustomEvent<string>) => void;
    /**
    * Setting to use the orthographic variant of the floorplan.
    */
    'useOrtho'?: boolean;
    /**
    * Setting to true adds a viewbox attribute to the SVG element.
    */
    'useViewbox'?: boolean;
    /**
    * The width of the SVG viewbox.
    */
    'vbHeight'?: string;
    /**
    * The height of the SVG viewbox.
    */
    'vbWidth'?: string;
    /**
    * The width for the SVG element.
    */
    'width'?: string;
  }
  interface RlLoadProgress {}
  interface RlMapNav {
    /**
    * The `id` of the currently active building.
    */
    'activeBuilding': Building;
    /**
    * The `id` of the currently active floor.
    */
    'activeFloor': Floor;
    /**
    * An id-indexed map of the buildings.
    */
    'buildings': BuildingMap;
    /**
    * An id-indexed map of floors.
    */
    'floors': FloorMap;
    /**
    * An event emitted when the selected Building changes.
    */
    'onBuildingChanged'?: (event: CustomEvent<any>) => void;
    /**
    * An event emitted when the selected Floor changes.
    */
    'onFloorChanged'?: (event: CustomEvent<any>) => void;
  }
  interface RlSearchBox {
    /**
    * The object used to perform text searches.
    */
    'docSearch': Search;
    /**
    * Reference to the Stencil history object.
    */
    'history'?: RouterHistory;
    /**
    * Event fired when the user clicks the search/menu icon.  This is needed to allow the menu to open the drawer.
    */
    'onIconClick'?: (event: CustomEvent<any>) => void;
    /**
    * Event fired when the text input is changed.
    */
    'onSearchChange'?: (event: CustomEvent<any>) => void;
    /**
    * Placeholder text for when the input is empty.
    */
    'placeholder'?: string;
    /**
    * The current value of the search input.
    */
    'searchValue'?: string;
    /**
    * Flag indicating if the menu icon should be displayed instead of the search icon.  This is needed when the search box extends the entire app bar and there is no room for the drawer icon.
    */
    'showMenu'?: boolean;
  }
  interface RlSearchSuggestions {
    /**
    * The currently active/highlighted/focused search suggestion.
    */
    'activeResult'?: number;
    /**
    * Flag indicating if there are no search suggestions (even though there is a search query).
    */
    'isEmptySearch'?: boolean;
    /**
    * Event fired when the user selects one of the search suggestions.
    */
    'onSuggestionClicked'?: (event: CustomEvent<SearchResultItem>) => void;
    /**
    * The list of search suggestions.
    */
    'suggestions'?: SearchResultItem[];
  }
  interface RlSideSheet {
    /**
    * Event fired when the `side-sheet` has finished closing.
    */
    'onClosed'?: (event: CustomEvent<any>) => void;
    /**
    * Event fired when the `side-sheet` has finished opening.
    */
    'onOpened'?: (event: CustomEvent<any>) => void;
    'open'?: boolean;
  }
  interface ViewBuilding {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded'?: boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
  }
  interface ViewEvent {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded'?: boolean;
    'history': RouterHistory;
  }
  interface ViewFaq {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded'?: boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
    /**
    * Reference to the object passed in from Stencil containing any URL path variables that were matched by the router.
    */
    'match': MatchResults;
  }
  interface ViewHome {
    'appLoaded'?: boolean;
    'clusterColumns'?: number;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
    'isMobile'?: boolean;
  }
  interface ViewMap {
    /**
    * A global flag passed in to indicate if the application has loaded as well.
    */
    'appLoaded'?: boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
    /**
    * The results coming from `stencil-router` that contain any URL matches.
    */
    'match': MatchResults;
    /**
    * Event fired when the data specific to this view is finished loading.
    */
    'onDataLoaded'?: (event: CustomEvent<any>) => void;
  }
  interface ViewSearch {
    'appLoaded'?: boolean;
    'clusterColumns'?: number;
    'history': RouterHistory;
    'isMobile'?: boolean;
    'match': MatchResults;
    'searchUrl'?: string;
  }

  interface IntrinsicElements {
    'rl-accordion': RlAccordion;
    'rl-accordion-item': RlAccordionItem;
    'rl-app-bar': RlAppBar;
    'rl-bis': RlBis;
    'rl-card': RlCard;
    'rl-cluster': RlCluster;
    'rl-drawer': RlDrawer;
    'rl-expansion-panel': RlExpansionPanel;
    'rl-floorplan': RlFloorplan;
    'rl-load-progress': RlLoadProgress;
    'rl-map-nav': RlMapNav;
    'rl-search-box': RlSearchBox;
    'rl-search-suggestions': RlSearchSuggestions;
    'rl-side-sheet': RlSideSheet;
    'view-building': ViewBuilding;
    'view-event': ViewEvent;
    'view-faq': ViewFaq;
    'view-home': ViewHome;
    'view-map': ViewMap;
    'view-search': ViewSearch;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'rl-accordion': LocalJSX.RlAccordion & JSXBase.HTMLAttributes<HTMLRlAccordionElement>;
      'rl-accordion-item': LocalJSX.RlAccordionItem & JSXBase.HTMLAttributes<HTMLRlAccordionItemElement>;
      'rl-app-bar': LocalJSX.RlAppBar & JSXBase.HTMLAttributes<HTMLRlAppBarElement>;
      'rl-bis': LocalJSX.RlBis & JSXBase.HTMLAttributes<HTMLRlBisElement>;
      'rl-card': LocalJSX.RlCard & JSXBase.HTMLAttributes<HTMLRlCardElement>;
      'rl-cluster': LocalJSX.RlCluster & JSXBase.HTMLAttributes<HTMLRlClusterElement>;
      'rl-drawer': LocalJSX.RlDrawer & JSXBase.HTMLAttributes<HTMLRlDrawerElement>;
      'rl-expansion-panel': LocalJSX.RlExpansionPanel & JSXBase.HTMLAttributes<HTMLRlExpansionPanelElement>;
      'rl-floorplan': LocalJSX.RlFloorplan & JSXBase.HTMLAttributes<HTMLRlFloorplanElement>;
      'rl-load-progress': LocalJSX.RlLoadProgress & JSXBase.HTMLAttributes<HTMLRlLoadProgressElement>;
      'rl-map-nav': LocalJSX.RlMapNav & JSXBase.HTMLAttributes<HTMLRlMapNavElement>;
      'rl-search-box': LocalJSX.RlSearchBox & JSXBase.HTMLAttributes<HTMLRlSearchBoxElement>;
      'rl-search-suggestions': LocalJSX.RlSearchSuggestions & JSXBase.HTMLAttributes<HTMLRlSearchSuggestionsElement>;
      'rl-side-sheet': LocalJSX.RlSideSheet & JSXBase.HTMLAttributes<HTMLRlSideSheetElement>;
      'view-building': LocalJSX.ViewBuilding & JSXBase.HTMLAttributes<HTMLViewBuildingElement>;
      'view-event': LocalJSX.ViewEvent & JSXBase.HTMLAttributes<HTMLViewEventElement>;
      'view-faq': LocalJSX.ViewFaq & JSXBase.HTMLAttributes<HTMLViewFaqElement>;
      'view-home': LocalJSX.ViewHome & JSXBase.HTMLAttributes<HTMLViewHomeElement>;
      'view-map': LocalJSX.ViewMap & JSXBase.HTMLAttributes<HTMLViewMapElement>;
      'view-search': LocalJSX.ViewSearch & JSXBase.HTMLAttributes<HTMLViewSearchElement>;
    }
  }
}


