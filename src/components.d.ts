/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Color,
} from './utils/color';
import {
  BuildingMap,
  MapElementData,
  SearchResultItem,
} from './interface';
import {
  BuildingMap as BuildingMap1,
  FloorMap,
} from './interface.js';
import {
  Search,
} from './utils/search';
import {
  MatchResults,
  RouterHistory,
} from '@stencil/router';
import {
  MAP_TYPE,
} from './global/constants';


export namespace Components {
  interface RlAccordion {
    /**
    * Flag indicating if multiple `accordion-item`s can be open at once. Defaults to true.
    */
    'allowMultiple': boolean;
    /**
    * An array of content displayed by the accordion.
    */
    'items': Array<{ [key: string]: string }>;
  }
  interface RlAccordionItem {
    /**
    * Close the `accordion-item`.
    */
    'close': () => Promise<void>;
    /**
    * A delay used to fade-in this item a specific amount of time after the component is rendered.
    */
    'delay': number;
    /**
    * An index number used to reference this item in the larger list of all items in the parent accordion.
    */
    'index': number;
    /**
    * A state tracking the current open/closed state of this item.
    */
    'isOpen': boolean;
    /**
    * Open the `accordion-item`.
    */
    'open': () => Promise<void>;
  }
  interface RlAppBar {
    /**
    * The current width of the application.  Used to determine what kind of interface should be displayed (reduced or full-width layout).
    */
    'appTitle': string;
    'centerTitle': boolean;
    'dense': boolean;
    'singleSection': boolean;
    'type': 'fixed' | 'prominent' | 'short' | 'shortCollapsed' | 'prominentFixed' | '';
  }
  interface RlBis {}
  interface RlCard {
    'buttons'?: Array<{name: string, link: string}>;
    'cardColor': Color;
    'cardData': { [keys: string]: string[] } | string;
    'cardMedia': string;
    'cardTitle': string;
    'hasPrimaryAction': boolean;
    'icons'?: Array<{name: string}>;
    'mediaSize': 'contain' | 'cover';
    'noContent': boolean;
    'noMedia': boolean;
    'titleInMedia': boolean;
    'wideMediaAspect': boolean;
  }
  interface RlCluster {
    'columns': number;
    'data': any;
    'hasMore': boolean;
    'heading': string;
    'type'?: string;
  }
  interface RlCollection {
    'collectionTitle': string;
  }
  interface RlDrawer {
    /**
    * Flag indicating if the drawer is open.
    */
    'open': boolean;
  }
  interface RlExpansionPanel {
    'close': () => Promise<void>;
    'index': number;
    'open': () => Promise<void>;
  }
  interface RlLoadProgress {}
  interface RlMapContainer {
    'buildings': BuildingMap;
    'extraDetails'?: {};
    'initialBuilding': number;
    'initialElement'?: number;
    'initialFloor': number;
    'setActiveElement': (el: MapElementData) => Promise<void>;
  }
  interface RlMapNav {
    /**
    * The `id` of the currently active building.
    */
    'activeBuilding': number;
    /**
    * The `id` of the currently active floor.
    */
    'activeFloor': number;
    /**
    * An id-indexed map of the buildings.
    */
    'buildings': BuildingMap;
    /**
    * An id-indexed map of floors.
    */
    'floors': FloorMap;
  }
  interface RlSearchBox {
    'clearInput': () => Promise<void>;
    'docSearch': Search;
    'id': string;
    'placeholder': string;
    'resultHeight': number;
    'searchValue': string;
    'showMenu': boolean;
  }
  interface RlSearchSuggestions {
    'activeResult'?: number;
    'isEmptySearch': boolean;
    'suggestions': SearchResultItem[];
  }
  interface RlSideSheet {
    'open': boolean;
  }
  interface ViewBook {
    'appLoaded': boolean;
    'history': RouterHistory;
  }
  interface ViewBuilding {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded': boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
  }
  interface ViewEvent {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded': boolean;
    'history': RouterHistory;
  }
  interface ViewFaq {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded': boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
    /**
    * Reference to the object passed in from Stencil containing any URL path variables that were matched by the router.
    */
    'match': MatchResults;
    'setActiveFaq': (faqId: number) => Promise<void>;
  }
  interface ViewHome {
    'appLoaded': boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
  }
  interface ViewMap {
    /**
    * A global flag passed in to indicate if the application has loaded as well.
    */
    'appLoaded': boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
    'mapType': MAP_TYPE;
    /**
    * The results coming from `stencil-router` that contain any URL matches.
    */
    'match': MatchResults;
    'setActiveDetail': (id: number) => Promise<void>;
    'setActiveElement': (id: number) => Promise<void>;
  }
  interface ViewSearch {
    'appLoaded': boolean;
    'history': RouterHistory;
    'match': MatchResults;
    'searchUrl'?: string;
  }
}

declare global {


  interface HTMLRlAccordionElement extends Components.RlAccordion, HTMLStencilElement {}
  var HTMLRlAccordionElement: {
    prototype: HTMLRlAccordionElement;
    new (): HTMLRlAccordionElement;
  };

  interface HTMLRlAccordionItemElement extends Components.RlAccordionItem, HTMLStencilElement {}
  var HTMLRlAccordionItemElement: {
    prototype: HTMLRlAccordionItemElement;
    new (): HTMLRlAccordionItemElement;
  };

  interface HTMLRlAppBarElement extends Components.RlAppBar, HTMLStencilElement {}
  var HTMLRlAppBarElement: {
    prototype: HTMLRlAppBarElement;
    new (): HTMLRlAppBarElement;
  };

  interface HTMLRlBisElement extends Components.RlBis, HTMLStencilElement {}
  var HTMLRlBisElement: {
    prototype: HTMLRlBisElement;
    new (): HTMLRlBisElement;
  };

  interface HTMLRlCardElement extends Components.RlCard, HTMLStencilElement {}
  var HTMLRlCardElement: {
    prototype: HTMLRlCardElement;
    new (): HTMLRlCardElement;
  };

  interface HTMLRlClusterElement extends Components.RlCluster, HTMLStencilElement {}
  var HTMLRlClusterElement: {
    prototype: HTMLRlClusterElement;
    new (): HTMLRlClusterElement;
  };

  interface HTMLRlCollectionElement extends Components.RlCollection, HTMLStencilElement {}
  var HTMLRlCollectionElement: {
    prototype: HTMLRlCollectionElement;
    new (): HTMLRlCollectionElement;
  };

  interface HTMLRlDrawerElement extends Components.RlDrawer, HTMLStencilElement {}
  var HTMLRlDrawerElement: {
    prototype: HTMLRlDrawerElement;
    new (): HTMLRlDrawerElement;
  };

  interface HTMLRlExpansionPanelElement extends Components.RlExpansionPanel, HTMLStencilElement {}
  var HTMLRlExpansionPanelElement: {
    prototype: HTMLRlExpansionPanelElement;
    new (): HTMLRlExpansionPanelElement;
  };

  interface HTMLRlLoadProgressElement extends Components.RlLoadProgress, HTMLStencilElement {}
  var HTMLRlLoadProgressElement: {
    prototype: HTMLRlLoadProgressElement;
    new (): HTMLRlLoadProgressElement;
  };

  interface HTMLRlMapContainerElement extends Components.RlMapContainer, HTMLStencilElement {}
  var HTMLRlMapContainerElement: {
    prototype: HTMLRlMapContainerElement;
    new (): HTMLRlMapContainerElement;
  };

  interface HTMLRlMapNavElement extends Components.RlMapNav, HTMLStencilElement {}
  var HTMLRlMapNavElement: {
    prototype: HTMLRlMapNavElement;
    new (): HTMLRlMapNavElement;
  };

  interface HTMLRlSearchBoxElement extends Components.RlSearchBox, HTMLStencilElement {}
  var HTMLRlSearchBoxElement: {
    prototype: HTMLRlSearchBoxElement;
    new (): HTMLRlSearchBoxElement;
  };

  interface HTMLRlSearchSuggestionsElement extends Components.RlSearchSuggestions, HTMLStencilElement {}
  var HTMLRlSearchSuggestionsElement: {
    prototype: HTMLRlSearchSuggestionsElement;
    new (): HTMLRlSearchSuggestionsElement;
  };

  interface HTMLRlSideSheetElement extends Components.RlSideSheet, HTMLStencilElement {}
  var HTMLRlSideSheetElement: {
    prototype: HTMLRlSideSheetElement;
    new (): HTMLRlSideSheetElement;
  };

  interface HTMLViewBookElement extends Components.ViewBook, HTMLStencilElement {}
  var HTMLViewBookElement: {
    prototype: HTMLViewBookElement;
    new (): HTMLViewBookElement;
  };

  interface HTMLViewBuildingElement extends Components.ViewBuilding, HTMLStencilElement {}
  var HTMLViewBuildingElement: {
    prototype: HTMLViewBuildingElement;
    new (): HTMLViewBuildingElement;
  };

  interface HTMLViewEventElement extends Components.ViewEvent, HTMLStencilElement {}
  var HTMLViewEventElement: {
    prototype: HTMLViewEventElement;
    new (): HTMLViewEventElement;
  };

  interface HTMLViewFaqElement extends Components.ViewFaq, HTMLStencilElement {}
  var HTMLViewFaqElement: {
    prototype: HTMLViewFaqElement;
    new (): HTMLViewFaqElement;
  };

  interface HTMLViewHomeElement extends Components.ViewHome, HTMLStencilElement {}
  var HTMLViewHomeElement: {
    prototype: HTMLViewHomeElement;
    new (): HTMLViewHomeElement;
  };

  interface HTMLViewMapElement extends Components.ViewMap, HTMLStencilElement {}
  var HTMLViewMapElement: {
    prototype: HTMLViewMapElement;
    new (): HTMLViewMapElement;
  };

  interface HTMLViewSearchElement extends Components.ViewSearch, HTMLStencilElement {}
  var HTMLViewSearchElement: {
    prototype: HTMLViewSearchElement;
    new (): HTMLViewSearchElement;
  };
  interface HTMLElementTagNameMap {
    'rl-accordion': HTMLRlAccordionElement;
    'rl-accordion-item': HTMLRlAccordionItemElement;
    'rl-app-bar': HTMLRlAppBarElement;
    'rl-bis': HTMLRlBisElement;
    'rl-card': HTMLRlCardElement;
    'rl-cluster': HTMLRlClusterElement;
    'rl-collection': HTMLRlCollectionElement;
    'rl-drawer': HTMLRlDrawerElement;
    'rl-expansion-panel': HTMLRlExpansionPanelElement;
    'rl-load-progress': HTMLRlLoadProgressElement;
    'rl-map-container': HTMLRlMapContainerElement;
    'rl-map-nav': HTMLRlMapNavElement;
    'rl-search-box': HTMLRlSearchBoxElement;
    'rl-search-suggestions': HTMLRlSearchSuggestionsElement;
    'rl-side-sheet': HTMLRlSideSheetElement;
    'view-book': HTMLViewBookElement;
    'view-building': HTMLViewBuildingElement;
    'view-event': HTMLViewEventElement;
    'view-faq': HTMLViewFaqElement;
    'view-home': HTMLViewHomeElement;
    'view-map': HTMLViewMapElement;
    'view-search': HTMLViewSearchElement;
  }
}

declare namespace LocalJSX {
  interface RlAccordion extends JSXBase.HTMLAttributes<HTMLRlAccordionElement> {
    /**
    * Flag indicating if multiple `accordion-item`s can be open at once. Defaults to true.
    */
    'allowMultiple'?: boolean;
    /**
    * An array of content displayed by the accordion.
    */
    'items'?: Array<{ [key: string]: string }>;
  }
  interface RlAccordionItem extends JSXBase.HTMLAttributes<HTMLRlAccordionItemElement> {
    /**
    * A delay used to fade-in this item a specific amount of time after the component is rendered.
    */
    'delay'?: number;
    /**
    * An index number used to reference this item in the larger list of all items in the parent accordion.
    */
    'index'?: number;
    /**
    * A state tracking the current open/closed state of this item.
    */
    'isOpen'?: boolean;
    /**
    * Event emitted after the body's collapse animation has completed.
    */
    'onAfterCollapse'?: (event: CustomEvent<any>) => void;
    /**
    * Event emitted after the body's expand animation has completed.
    */
    'onAfterExpand'?: (event: CustomEvent<any>) => void;
    /**
    * Event emitted when the item is closed.
    */
    'onClosed'?: (event: CustomEvent<any>) => void;
    /**
    * Event emitted when the item is opened.
    */
    'onOpened'?: (event: CustomEvent<any>) => void;
  }
  interface RlAppBar extends JSXBase.HTMLAttributes<HTMLRlAppBarElement> {
    /**
    * The current width of the application.  Used to determine what kind of interface should be displayed (reduced or full-width layout).
    */
    'appTitle'?: string;
    'centerTitle'?: boolean;
    'dense'?: boolean;
    /**
    * Event fired when the menu button on the app bar is clicked.
    */
    'onMenuClicked'?: (event: CustomEvent<any>) => void;
    'onSearchFaqClicked'?: (event: CustomEvent<any>) => void;
    'onSearchLocationClicked'?: (event: CustomEvent<any>) => void;
    'singleSection'?: boolean;
    'type'?: 'fixed' | 'prominent' | 'short' | 'shortCollapsed' | 'prominentFixed' | '';
  }
  interface RlBis extends JSXBase.HTMLAttributes<HTMLRlBisElement> {}
  interface RlCard extends JSXBase.HTMLAttributes<HTMLRlCardElement> {
    'buttons'?: Array<{name: string, link: string}>;
    'cardColor'?: Color;
    'cardData'?: { [keys: string]: string[] } | string;
    'cardMedia'?: string;
    'cardTitle'?: string;
    'hasPrimaryAction'?: boolean;
    'icons'?: Array<{name: string}>;
    'mediaSize'?: 'contain' | 'cover';
    'noContent'?: boolean;
    'noMedia'?: boolean;
    'onCardClicked'?: (event: CustomEvent<any>) => void;
    'titleInMedia'?: boolean;
    'wideMediaAspect'?: boolean;
  }
  interface RlCluster extends JSXBase.HTMLAttributes<HTMLRlClusterElement> {
    'columns'?: number;
    'data'?: any;
    'hasMore'?: boolean;
    'heading'?: string;
    'type'?: string;
  }
  interface RlCollection extends JSXBase.HTMLAttributes<HTMLRlCollectionElement> {
    'collectionTitle'?: string;
  }
  interface RlDrawer extends JSXBase.HTMLAttributes<HTMLRlDrawerElement> {
    /**
    * An event emitted when this drawer closes.
    */
    'onDrawerClose'?: (event: CustomEvent<any>) => void;
    /**
    * Flag indicating if the drawer is open.
    */
    'open': boolean;
  }
  interface RlExpansionPanel extends JSXBase.HTMLAttributes<HTMLRlExpansionPanelElement> {
    'index'?: number;
    'onToggled'?: (event: CustomEvent<any>) => void;
  }
  interface RlLoadProgress extends JSXBase.HTMLAttributes<HTMLRlLoadProgressElement> {}
  interface RlMapContainer extends JSXBase.HTMLAttributes<HTMLRlMapContainerElement> {
    'buildings': BuildingMap;
    'extraDetails'?: {};
    'initialBuilding': number;
    'initialElement'?: number;
    'initialFloor': number;
  }
  interface RlMapNav extends JSXBase.HTMLAttributes<HTMLRlMapNavElement> {
    /**
    * The `id` of the currently active building.
    */
    'activeBuilding': number;
    /**
    * The `id` of the currently active floor.
    */
    'activeFloor': number;
    /**
    * An id-indexed map of the buildings.
    */
    'buildings': BuildingMap;
    /**
    * An id-indexed map of floors.
    */
    'floors': FloorMap;
    /**
    * An event emitted when the selected Building changes.
    */
    'onBuildingChanged'?: (event: CustomEvent<any>) => void;
    /**
    * An event emitted when the selected Floor changes.
    */
    'onFloorChanged'?: (event: CustomEvent<any>) => void;
  }
  interface RlSearchBox extends JSXBase.HTMLAttributes<HTMLRlSearchBoxElement> {
    'docSearch': Search;
    'id'?: string;
    'onIconClick'?: (event: CustomEvent<any>) => void;
    'onSearchChange'?: (event: CustomEvent<any>) => void;
    'placeholder'?: string;
    'resultHeight'?: number;
    'searchValue'?: string;
    'showMenu'?: boolean;
  }
  interface RlSearchSuggestions extends JSXBase.HTMLAttributes<HTMLRlSearchSuggestionsElement> {
    'activeResult'?: number;
    'isEmptySearch'?: boolean;
    'onSuggestionClicked'?: (event: CustomEvent<any>) => void;
    'suggestions'?: SearchResultItem[];
  }
  interface RlSideSheet extends JSXBase.HTMLAttributes<HTMLRlSideSheetElement> {
    /**
    * Event fired when the `side-sheet` has finished closing.
    */
    'onClosed'?: (event: CustomEvent<any>) => void;
    /**
    * Event fired when the `side-sheet` has finished opening.
    */
    'onOpened'?: (event: CustomEvent<any>) => void;
    'open'?: boolean;
  }
  interface ViewBook extends JSXBase.HTMLAttributes<HTMLViewBookElement> {
    'appLoaded'?: boolean;
    'history': RouterHistory;
  }
  interface ViewBuilding extends JSXBase.HTMLAttributes<HTMLViewBuildingElement> {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded'?: boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
  }
  interface ViewEvent extends JSXBase.HTMLAttributes<HTMLViewEventElement> {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded'?: boolean;
    'history': RouterHistory;
  }
  interface ViewFaq extends JSXBase.HTMLAttributes<HTMLViewFaqElement> {
    /**
    * Global flag indicating if the whole application has loaded.  If not, this view should not display either.
    */
    'appLoaded'?: boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
    /**
    * Reference to the object passed in from Stencil containing any URL path variables that were matched by the router.
    */
    'match': MatchResults;
  }
  interface ViewHome extends JSXBase.HTMLAttributes<HTMLViewHomeElement> {
    'appLoaded'?: boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
  }
  interface ViewMap extends JSXBase.HTMLAttributes<HTMLViewMapElement> {
    /**
    * A global flag passed in to indicate if the application has loaded as well.
    */
    'appLoaded'?: boolean;
    /**
    * Reference to the stencil-router history object. Used to programmatically change the browser history when the selected FAQ changes.
    */
    'history': RouterHistory;
    'mapType'?: MAP_TYPE;
    /**
    * The results coming from `stencil-router` that contain any URL matches.
    */
    'match': MatchResults;
    /**
    * Event fired when the data specific to this view is finished loading.
    */
    'onDataLoaded'?: (event: CustomEvent<any>) => void;
  }
  interface ViewSearch extends JSXBase.HTMLAttributes<HTMLViewSearchElement> {
    'appLoaded'?: boolean;
    'history': RouterHistory;
    'match': MatchResults;
    'searchUrl'?: string;
  }

  interface IntrinsicElements {
    'rl-accordion': RlAccordion;
    'rl-accordion-item': RlAccordionItem;
    'rl-app-bar': RlAppBar;
    'rl-bis': RlBis;
    'rl-card': RlCard;
    'rl-cluster': RlCluster;
    'rl-collection': RlCollection;
    'rl-drawer': RlDrawer;
    'rl-expansion-panel': RlExpansionPanel;
    'rl-load-progress': RlLoadProgress;
    'rl-map-container': RlMapContainer;
    'rl-map-nav': RlMapNav;
    'rl-search-box': RlSearchBox;
    'rl-search-suggestions': RlSearchSuggestions;
    'rl-side-sheet': RlSideSheet;
    'view-book': ViewBook;
    'view-building': ViewBuilding;
    'view-event': ViewEvent;
    'view-faq': ViewFaq;
    'view-home': ViewHome;
    'view-map': ViewMap;
    'view-search': ViewSearch;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


